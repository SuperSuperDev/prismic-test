// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pSGwZDAYME5TdPFpDRZPiX
// Component: 1OkwftrQhCTsXU
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: rOQRnGjKovcOBT/component
import Button from "../../Button"; // plasmic-import: pNUvmoFVnhKnbn/component
import Icon from "../../Icon"; // plasmic-import: DtPrgiAnsqxU5q/component
import { CategoryCollection } from "@plasmicpkgs/commerce"; // plasmic-import: ny07p45F84c_/codeComponent
import { CategoryField } from "@plasmicpkgs/commerce"; // plasmic-import: hzqiq--xdG5T/codeComponent
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import Product from "../../Product"; // plasmic-import: 8sPBcCqjAEwzk3/component
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import TextInput from "../../TextInput"; // plasmic-import: 4V7x1VGL3NrBvM/component

import { useScreenVariants as useScreenVariantsbfGvTWkOjKs55Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BfGvTWkOJKs55Y/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_origin.module.css"; // plasmic-import: pSGwZDAYME5TdPFpDRZPiX/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: 1OkwftrQhCTsXU/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: NEfwK6-JY3fnG/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: D1Qvzqhw3Cw_l/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: nYCyALXwXK6Xf/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: s4S8ExfCe-gxj/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 9z_Xcd1534MIR/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: difpCuOhpsNA1/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: v36_NXiFFYr6O/icon
import AngleRightsvgIcon from "./icons/PlasmicIcon__AngleRightsvg"; // plasmic-import: o-eToQVO5JMTG/icon
import ArrowLeftSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ArrowLeftSvgrepoCom1Svg"; // plasmic-import: 2yOf9yKXpPDv-/icon
import StarSvgrepoComsvgIcon from "./icons/PlasmicIcon__StarSvgrepoComsvg"; // plasmic-import: -E82MZDWAlSY7/icon
import ArrowRightSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__ArrowRightSvgrepoCom1Svg"; // plasmic-import: pWX6btjXPr8qP/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: p1gUg2FqR_LCK/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: iP4LXwPvMVFQw/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: WJJNxzgspxnjB/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {
  children?: React.ReactNode;
  children2?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>(
  "children",
  "children2"
);

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  foreground2?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  categoryCollection?: p.Flex<typeof CategoryCollection>;
  categoryField?: p.Flex<typeof CategoryField>;
  productCollection?: p.Flex<typeof ProductCollection>;
  product?: p.Flex<typeof Product>;
  _2?: p.Flex<"a"> & Partial<LinkProps>;
  httpsstudioplasmicapp?: p.Flex<"a"> & Partial<LinkProps>;
  _?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbfGvTWkOjKs55Y()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__hmFKx)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__uesuM)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__hVuom)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Ftmn
                  )}
                >
                  {"Get 55% off Lorem Ipsum enough lorem discount"}
                </div>
              </p.Stack>

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__uSTm)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__u6Aym
                    )}
                  >
                    {"Sign up"}
                  </button>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__vJjwj
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__brWuv)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iuIi
                      )}
                    >
                      {"Log in"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__hsbht)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>

          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__eHmMb)}>
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mgbkK)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {"Perfection is not enough"}
                </h1>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yWkdE
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. "
                  }
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button__f7K2S)}
                  color={"softSand" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pcCio
                    )}
                  >
                    {"Read More"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vqFPt)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___7WyJ)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__o5IAw)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__gm7G4)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__lpo6M
                    )}
                  >
                    {"100% Arabica and beyond"}
                  </h2>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__krIg9)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__uOr0G)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__xs8HA)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__w0ZrW
                        )}
                      >
                        {"Direct sourcing"}
                      </div>
                    }
                  >
                    <Icon5Icon
                      className={classNames(projectcss.all, sty.svg__dEzsv)}
                      role={"img"}
                    />
                  </Icon>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__gi48V)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon___6YorJ)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__j2X7J
                        )}
                      >
                        {"Organic farming practices"}
                      </div>
                    }
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg___2UtfT)}
                      role={"img"}
                    />
                  </Icon>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__y2Fh4)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon___8XROb)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uoZyo
                        )}
                      >
                        {"Biodegradable packaging"}
                      </div>
                    }
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg___1CZfx)}
                      role={"img"}
                    />
                  </Icon>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__sgm5Z)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__cmzK)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__t6B22
                        )}
                      >
                        {"Enjoyment guarantee"}
                      </div>
                    }
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg___6OpgV)}
                      role={"img"}
                    />
                  </Icon>
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___7YbwR)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__eksxI)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__d7Lkp)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__q31D4)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ee4Af
                    )}
                  >
                    {"Fresh Origin"}
                  </h2>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mrXtO
                  )}
                >
                  {
                    "What's better than having our amazing coffee at home? Getting it delivered so you never run out."
                  }
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button__ubWW)}
                  color={"softSand" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tzQTh
                    )}
                  >
                    {"Read More"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nOVu)}
          >
            <CategoryCollection
              data-plasmic-name={"categoryCollection"}
              data-plasmic-override={overrides.categoryCollection}
              category={"5e1f3e10e3f20f3c0043d0a2" as const}
              className={classNames("__wab_instance", sty.categoryCollection)}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__p4B4N
                        )}
                      >
                        {"No collection found!"}
                      </div>
                    </>
                  )}
                </ph.DataCtxReader>
              }
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__aWsCd
                        )}
                      >
                        {"Loading..."}
                      </div>
                    </>
                  )}
                </ph.DataCtxReader>
              }
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <>
                    <div
                      className={classNames(projectcss.all, sty.freeBox___1EcM)}
                    >
                      <h2
                        className={classNames(
                          projectcss.all,
                          projectcss.h2,
                          sty.h2__iVxJ
                        )}
                      >
                        <CategoryField
                          data-plasmic-name={"categoryField"}
                          data-plasmic-override={overrides.categoryField}
                          className={classNames(
                            "__wab_instance",
                            sty.categoryField
                          )}
                          field={"name" as const}
                        />
                      </h2>

                      <ProductCollection
                        data-plasmic-name={"productCollection"}
                        data-plasmic-override={overrides.productCollection}
                        className={classNames(
                          "__wab_instance",
                          sty.productCollection
                        )}
                        count={3 as const}
                        emptyMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yjJ
                                  )}
                                >
                                  {"No product found!"}
                                </div>
                              </>
                            )}
                          </ph.DataCtxReader>
                        }
                        includeSubCategories={true}
                        loadingMessage={
                          <ph.DataCtxReader>
                            {$ctx => (
                              <>
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___62InZ
                                  )}
                                >
                                  {"Loading..."}
                                </div>
                              </>
                            )}
                          </ph.DataCtxReader>
                        }
                      >
                        <ph.DataCtxReader>
                          {$ctx => (
                            <>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__dsVcn
                                )}
                              >
                                <Product
                                  data-plasmic-name={"product"}
                                  data-plasmic-override={overrides.product}
                                  className={classNames(
                                    "__wab_instance",
                                    sty.product
                                  )}
                                />
                              </div>
                            </>
                          )}
                        </ph.DataCtxReader>
                      </ProductCollection>
                    </div>
                  </>
                )}
              </ph.DataCtxReader>
            </CategoryCollection>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xRgWq)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tuvxe)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ojsOn)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__qeLqL)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__rPfqs
                    )}
                  >
                    {"Transparency and sustainability from \nbean to bag"}
                  </h2>
                </div>
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fjJlV)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___42KK7)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"75%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/origin/images/battlecreekCoffeeRoastersY2CKex0Gv5UUnsplashjpg.jpeg",
                      fullWidth: 1920,
                      fullHeight: 1280,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__vzWao)}>
            <div className={classNames(projectcss.all, sty.freeBox__o7LoQ)}>
              <div className={classNames(projectcss.all, sty.columns__ypHeU)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__exLyD)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__yrHSd
                    )}
                  >
                    {"Brewing guides"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ryviy
                    )}
                  >
                    {
                      "You don't need a chemistry degree to make great coffee at home. We've done the lab work, so all you have to do is follow our step-by-step instructions."
                    }
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__molpJ
                    )}
                    component={Link}
                    href={"/about" as const}
                    platform={"nextjs"}
                  >
                    {"Brew with confidence"}
                  </p.PlasmicLink>
                </p.Stack>

                <div className={classNames(projectcss.all, sty.column__wpYOy)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___3Yz4O)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/origin/images/mikeKenneallyZlwDJoKTuA8Unsplashjpg.jpeg",
                      fullWidth: 1920,
                      fullHeight: 1282,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__zohiW)}>
            <div className={classNames(projectcss.all, sty.freeBox__oDshh)}>
              <div className={classNames(projectcss.all, sty.columns__y40En)}>
                <div className={classNames(projectcss.all, sty.column__uDh6J)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ayUyf)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/origin/images/mikeKenneallyTNaLoIZhqVmUnsplash1Jpg.jpeg",
                      fullWidth: 1920,
                      fullHeight: 1260,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__ismph)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__zpyOq
                    )}
                  >
                    {"Latte art classes"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nxXIi
                    )}
                  >
                    {
                      "No, we aren't kidding. Spend the morning with a master barista learning how to pour a grammable rosetta in our well-lit and aesthetically pleasing Alexandria roastery."
                    }
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__zAChI
                    )}
                    component={Link}
                    href={"/about" as const}
                    platform={"nextjs"}
                  >
                    {"View class details"}
                  </p.PlasmicLink>
                </p.Stack>
              </div>
            </div>
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ol23C)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oqGcl)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fnd2V)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sNlNx)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tqId3
                      )}
                    >
                      {"“We're never drinking supermarket coffee pods again”"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___77Wzy
                      )}
                    >
                      {"— Bustle"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__g1J4W)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__cIvS
                      )}
                    >
                      {
                        "“Our publishing rate has increased 34% since getting an office subscription”"
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gGxP4
                      )}
                    >
                      {"— Refinery29"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qckJy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rajRt
                      )}
                    >
                      {"“This story is available to BI Prime subscribers only”"}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m0VOj
                      )}
                    >
                      {"— Business Insider "}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__uvZmr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__escvT
                      )}
                    >
                      {
                        "“Origin is disrupting the specialty coffee world in a big way”"
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zpfp3
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>{""}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"— Fast Company"}
                        </span>
                        <React.Fragment>{""}</React.Fragment>
                      </React.Fragment>
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__lUp4T)}>
            <div className={classNames(projectcss.all, sty.freeBox__znCXe)}>
              <div className={classNames(projectcss.all, sty.columns__hud8)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__gXdCe)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__xzFzm
                    )}
                  >
                    {"Caffeinate your inbox"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7Dl4
                    )}
                  >
                    {
                      "If we could send you coffee via email we would. Until then, it's the most legit coffee-related stuff, every week or two."
                    }
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__qucR1)}
                  >
                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__vpBu
                      )}
                      endIcon={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__ul1Pe
                          )}
                        >
                          <AngleRightsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__h33Tc
                            )}
                            role={"img"}
                          />
                        </Button>
                      }
                      placeholder={"E-mail" as const}
                      showEndIcon={true}
                    />
                  </div>
                </p.Stack>

                <div className={classNames(projectcss.all, sty.column__lytS6)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__ehvrD)}
                    displayHeight={"100%" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/origin/images/mikeKenneallyZlwDJoKTuA8Unsplashjpg.jpeg",
                      fullWidth: 1920,
                      fullHeight: 1282,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__hgzqs)}>
            <div className={classNames(projectcss.all, sty.freeBox__e7Avz)}>
              <div className={classNames(projectcss.all, sty.freeBox___4KjIr)}>
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__pgHin)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__ixITv
                      )}
                    >
                      {"Their words, not ours"}
                    </h2>
                  </div>
                ) : null}

                <div
                  className={classNames(projectcss.all, sty.columns___8X4Yo)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__tb5Ts)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dlzpx)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <ArrowLeftSvgrepoCom1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__u0Psh
                            )}
                            role={"img"}
                          />
                        ),

                        value: args.children
                      })}
                    </div>
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__xpPcp)}
                  >
                    {true ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___782Xz
                        )}
                      >
                        <StarSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__x2V3S)}
                          role={"img"}
                        />

                        <StarSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__aF5O)}
                          role={"img"}
                        />

                        <StarSvgrepoComsvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0BqPx
                          )}
                          role={"img"}
                        />

                        <StarSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__wnQpg)}
                          role={"img"}
                        />

                        <StarSvgrepoComsvgIcon
                          className={classNames(projectcss.all, sty.svg__oJk3T)}
                          role={"img"}
                        />
                      </p.Stack>
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dHcP
                      )}
                    >
                      {
                        '"A sem a velit consequat a torquent posuere nibh consectetur ac \nsodales mi vulputate imperdiet suspendisse a adipiscing felis convallis \nest tristique faucibus condimentum ante viverra."'
                      }
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sD1U
                      )}
                    >
                      {"Carmine R , California "}
                    </div>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.column___9Ti1P)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gzdMm)}
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <ArrowRightSvgrepoCom1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__zRgSs
                            )}
                            role={"img"}
                          />
                        ),

                        value: args.children2
                      })}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__inHib)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vRTr9)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kFvrS)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__hNeZj)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nqQQr
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us\n"
                      : "Contact us\n"}
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ry1Lp
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "(555) 555-5555"
                      : "(555) 555-5555"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__xDpaX
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"support@example.com"}
                  </p.PlasmicLink>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gx54)}
              >
                <p.PlasmicLink
                  data-plasmic-name={"_2"}
                  data-plasmic-override={overrides._2}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty._2
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("#" as const)
                      : ("/shop" as const)
                  }
                  platform={"nextjs"}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Shop"
                    : "Shop"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__cKdi1
                  )}
                  component={Link}
                  href={"/academy" as const}
                  platform={"nextjs"}
                >
                  {"The Academy"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__joFpB
                  )}
                  component={Link}
                  href={"/about" as const}
                  platform={"nextjs"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___2Ozl
                  )}
                  component={Link}
                  href={"/help" as const}
                  platform={"nextjs"}
                >
                  {"Help"}
                </p.PlasmicLink>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__bXgrw)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lgJ5F
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Email newsletter"
                    : "Email newsletter"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__we8M)}>
                  <TextInput
                    className={classNames(
                      "__wab_instance",
                      sty.textInput__fQjbp
                    )}
                    endIcon={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__vy6Zi
                        )}
                      >
                        <AngleRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__zZdcK)}
                          role={"img"}
                        />
                      </Button>
                    }
                    placeholder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("E-mail" as const)
                        : ("E-mail" as const)
                    }
                    showEndIcon={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    }
                  />
                </div>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3CHdd)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__mtBe
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__vOqB2)}
                        role={"img"}
                      />
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__sInOi)}
                    >
                      <p.PlasmicIcon
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? Icon3Icon
                            : Icon3Icon
                        }
                        className={classNames(projectcss.all, sty.svg___9Z4W)}
                        role={"img"}
                      />

                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__rImlU)}
                        role={"img"}
                      />

                      <p.PlasmicIcon
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? Icon28Icon
                            : Icon28Icon
                        }
                        className={classNames(projectcss.all, sty.svg__vrrmd)}
                        role={"img"}
                      />
                    </p.Stack>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__jcMa1)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
              ) : null}
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__a5Lcc)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__o29Ar
                    )}
                  >
                    {"Sign up"}
                  </button>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___6Ute
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___9ZlX)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dfqLw
                      )}
                    >
                      {"Log in"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___0O70V)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox___0Lp4O)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__myvP6)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mfyXf)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2VbZn)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__aLtY8
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "(c) Company. All rights reserved. This site proudly built with"
                        : "© Company. All rights reserved. This site proudly built with"}
                    </div>

                    <p.PlasmicLink
                      data-plasmic-name={"httpsstudioplasmicapp"}
                      data-plasmic-override={overrides.httpsstudioplasmicapp}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.httpsstudioplasmicapp
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? " Plasmic"
                        : " Plasmic"}
                    </p.PlasmicLink>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__w02Ej)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___7NP5I)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ecLws)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f8Uq
                        )}
                      >
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__nyDm
                          )}
                          component={Link}
                          href={"/shipping" as const}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tNiTb
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__weJv
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "shop"
                              : "Shipping & Returns"}
                          </div>

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__eEe2I
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>

                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__iWxkK
                          )}
                          component={Link}
                          href={"/privacypolicy" as const}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__n5J8E
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__zdbsu
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gxvdG
                            )}
                          >
                            {"Privacy policy"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__djb6S
                          )}
                          component={Link}
                          href={"/terms" as const}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__igTor
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__fkniT
                            )}
                          >
                            {"Terms & Conditions"}
                          </div>

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__wjRqh
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__b02Dg)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__usDIb)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ge5Oy)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zjTf)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mFRzU
                      )}
                    >
                      {"Contact us\n"}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__b12Yr
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"(555) 555-5555"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__f9DvR
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"support@example.com"}
                    </p.PlasmicLink>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yl5AP)}
                >
                  <p.PlasmicLink
                    data-plasmic-name={"_"}
                    data-plasmic-override={overrides._}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty._
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    {"Shop"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__uvIGf
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"The Academy"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ss4Qd
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"About"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__tUuNb
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Help"}
                  </p.PlasmicLink>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zpoCu)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nTgg
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Email newsletter"
                      : "Email newsletter"}
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__rm1MS)}
                  >
                    <TextInput
                      className={classNames(
                        "__wab_instance",
                        sty.textInput__lfbv6
                      )}
                      endIcon={
                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__qUSm
                          )}
                        >
                          <AngleRightsvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__yug7F
                            )}
                            role={"img"}
                          />
                        </Button>
                      }
                      placeholder={"E-mail" as const}
                      showEndIcon={true}
                    />
                  </div>
                </p.Stack>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__k2C7)}
                  >
                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__fYoYb
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___09V0B
                          )}
                          role={"img"}
                        />
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f5KX
                        )}
                      >
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__fFqbT)}
                          role={"img"}
                        />

                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__wFkq)}
                          role={"img"}
                        />

                        <Icon28Icon
                          className={classNames(projectcss.all, sty.svg__bCt1U)}
                          role={"img"}
                        />
                      </p.Stack>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg___3GBz)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                ) : null}
                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hXfEs)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__ehFAv
                      )}
                    >
                      {"Sign up"}
                    </button>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__uz9NF
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__pp2Rw)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f4Zyb
                        )}
                      >
                        {"Log in"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___6O9Pp
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__hiD8P)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___6U0Wy)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gRaAf)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cc8N9)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jJvss
                        )}
                      >
                        {
                          "(c) Company. All rights reserved. This site proudly built with"
                        }
                      </div>

                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link__hjXv8
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {" Plasmic"}
                      </p.PlasmicLink>
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__praCo)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__l1J8G)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ewzH4
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zbBzx
                          )}
                        >
                          <p.Stack
                            as={p.PlasmicLink}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__sVmft
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___8Iq6Y
                                )}
                                role={"img"}
                              />
                            ) : null}

                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link___7TeSp
                              )}
                              component={Link}
                              href={"/shop" as const}
                              platform={"nextjs"}
                            >
                              {"shop"}
                            </p.PlasmicLink>

                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___53Gsa
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>

                          <p.Stack
                            as={p.PlasmicLink}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__kdrrW
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ot45C
                                )}
                                role={"img"}
                              />
                            ) : null}

                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link___9A1Hs
                              )}
                              component={Link}
                              href={"/academy" as const}
                              platform={"nextjs"}
                            >
                              {"The Academy"}
                            </p.PlasmicLink>

                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__diMv2
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>

                          <p.Stack
                            as={p.PlasmicLink}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__e9MJ
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__hmeDs
                                )}
                                role={"img"}
                              />
                            ) : null}

                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                projectcss.__wab_text,
                                sty.link__mN9A
                              )}
                              component={Link}
                              href={"/about" as const}
                              platform={"nextjs"}
                            >
                              {"About"}
                            </p.PlasmicLink>

                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__wWjpV
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "foreground2",
    "h1",
    "categoryCollection",
    "categoryField",
    "productCollection",
    "product",
    "_2",
    "httpsstudioplasmicapp",
    "_"
  ],
  header: ["header"],
  foreground2: ["foreground2", "h1"],
  h1: ["h1"],
  categoryCollection: [
    "categoryCollection",
    "categoryField",
    "productCollection",
    "product"
  ],
  categoryField: ["categoryField"],
  productCollection: ["productCollection", "product"],
  product: ["product"],
  _2: ["_2"],
  httpsstudioplasmicapp: ["httpsstudioplasmicapp"],
  _: ["_"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  foreground2: "div";
  h1: "h1";
  categoryCollection: typeof CategoryCollection;
  categoryField: typeof CategoryField;
  productCollection: typeof ProductCollection;
  product: typeof Product;
  _2: "a";
  httpsstudioplasmicapp: "a";
  _: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    categoryCollection: makeNodeComponent("categoryCollection"),
    categoryField: makeNodeComponent("categoryField"),
    productCollection: makeNodeComponent("productCollection"),
    product: makeNodeComponent("product"),
    _2: makeNodeComponent("_2"),
    httpsstudioplasmicapp: makeNodeComponent("httpsstudioplasmicapp"),
    _: makeNodeComponent("_"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
