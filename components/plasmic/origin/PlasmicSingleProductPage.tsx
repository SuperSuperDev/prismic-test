// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: pSGwZDAYME5TdPFpDRZPiX
// Component: KR1qjb8IACErLi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: rOQRnGjKovcOBT/component
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import { ProductVariantPicker } from "@plasmicpkgs/commerce"; // plasmic-import: i3vHZr7erKX/codeComponent
import { AddToCartButton } from "@plasmicpkgs/commerce"; // plasmic-import: NR7KYUJmEqx/codeComponent
import Button from "../../Button"; // plasmic-import: pNUvmoFVnhKnbn/component
import Icon from "../../Icon"; // plasmic-import: DtPrgiAnsqxU5q/component
import TextInput from "../../TextInput"; // plasmic-import: 4V7x1VGL3NrBvM/component

import { useScreenVariants as useScreenVariantsbfGvTWkOjKs55Y } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: BfGvTWkOJKs55Y/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_origin.module.css"; // plasmic-import: pSGwZDAYME5TdPFpDRZPiX/projectcss
import sty from "./PlasmicSingleProductPage.module.css"; // plasmic-import: KR1qjb8IACErLi/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: NEfwK6-JY3fnG/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: D1Qvzqhw3Cw_l/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: nYCyALXwXK6Xf/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: s4S8ExfCe-gxj/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 9z_Xcd1534MIR/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: difpCuOhpsNA1/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: v36_NXiFFYr6O/icon
import AngleRightsvgIcon from "./icons/PlasmicIcon__AngleRightsvg"; // plasmic-import: o-eToQVO5JMTG/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: p1gUg2FqR_LCK/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: iP4LXwPvMVFQw/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: WJJNxzgspxnjB/icon

export type PlasmicSingleProductPage__VariantMembers = {};

export type PlasmicSingleProductPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicSingleProductPage__VariantsArgs;
export const PlasmicSingleProductPage__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSingleProductPage__ArgsType = {};
type ArgPropType = keyof PlasmicSingleProductPage__ArgsType;
export const PlasmicSingleProductPage__ArgProps = new Array<ArgPropType>();

export type PlasmicSingleProductPage__OverridesType = {
  single?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  columns?: p.Flex<"div">;
  productMedia?: p.Flex<typeof ProductMedia>;
  productPrice?: p.Flex<typeof ProductPriceComponent>;
  productVariantPicker?: p.Flex<typeof ProductVariantPicker>;
  addToCartButton?: p.Flex<typeof AddToCartButton>;
  textInput?: p.Flex<typeof TextInput>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultSingleProductPageProps {}

function PlasmicSingleProductPage__RenderFunc(props: {
  variants: PlasmicSingleProductPage__VariantsArgs;
  args: PlasmicSingleProductPage__ArgsType;
  overrides: PlasmicSingleProductPage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsbfGvTWkOjKs55Y()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"single"}
          data-plasmic-override={overrides.single}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.single
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__sgLt)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__v61I4)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ymo89)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mgVd
                  )}
                >
                  {"Get 55% off Lorem Ipsum enough lorem discount"}
                </div>
              </p.Stack>

              {false ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___74WJc)}
                >
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__h2NlL
                    )}
                  >
                    {"Sign up"}
                  </button>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__yLfH2
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__x5MG)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jxXEn
                      )}
                    >
                      {"Log in"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__zNf9)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>

          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__jwCc7)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__fqd7C)}>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__mlEvg)}
                  >
                    <ProductMedia
                      data-plasmic-name={"productMedia"}
                      data-plasmic-override={overrides.productMedia}
                      className={classNames("__wab_instance", sty.productMedia)}
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__xhEzq)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        sty.h2__mJYm
                      )}
                    >
                      <ProductTextField
                        className={classNames(
                          "__wab_instance",
                          sty.productTextField__uzk5T
                        )}
                        field={"name" as const}
                      />
                    </h2>

                    <ProductPriceComponent
                      data-plasmic-name={"productPrice"}
                      data-plasmic-override={overrides.productPrice}
                      className={classNames("__wab_instance", sty.productPrice)}
                    />

                    <ProductTextField
                      className={classNames(
                        "__wab_instance",
                        sty.productTextField__cHtO
                      )}
                      field={"description" as const}
                    />

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__enTpo
                        )}
                      >
                        <ProductVariantPicker
                          data-plasmic-name={"productVariantPicker"}
                          data-plasmic-override={overrides.productVariantPicker}
                          className={classNames(
                            "__wab_instance",
                            sty.productVariantPicker
                          )}
                        />

                        <AddToCartButton
                          data-plasmic-name={"addToCartButton"}
                          data-plasmic-override={overrides.addToCartButton}
                          className={classNames(
                            "__wab_instance",
                            sty.addToCartButton
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__n04Jg
                            )}
                            color={"star" as const}
                          >
                            {"Add to cart"}
                          </Button>
                        </AddToCartButton>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </div>
              </div>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__zCe1E)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___1BOJz)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__kdeuv)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__zlSrw)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ahDjm
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100% Arabica and beyond"
                      : "100% Arabica and beyond"}
                  </h2>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0DmtJ)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__n7VRr)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon___14Fpl)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bff8G
                        )}
                      >
                        {"Direct sourcing"}
                      </div>
                    }
                  >
                    <Icon5Icon
                      className={classNames(projectcss.all, sty.svg__a2QIm)}
                      role={"img"}
                    />
                  </Icon>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__x8CFf)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon__lUbh2)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ivHbn
                        )}
                      >
                        {"Organic farming practices"}
                      </div>
                    }
                  >
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__kYjuh)}
                      role={"img"}
                    />
                  </Icon>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___0Smud)}
                >
                  <Icon
                    className={classNames("__wab_instance", sty.icon__nKgMa)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6OjaX
                        )}
                      >
                        {"Biodegradable packaging"}
                      </div>
                    }
                  >
                    <Icon6Icon
                      className={classNames(projectcss.all, sty.svg__mcH3C)}
                      role={"img"}
                    />
                  </Icon>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__xLhmm)}>
                  <Icon
                    className={classNames("__wab_instance", sty.icon___7R1Us)}
                    slot={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__seyC0
                        )}
                      >
                        {"Enjoyment guarantee"}
                      </div>
                    }
                  >
                    <Icon7Icon
                      className={classNames(projectcss.all, sty.svg__s0Iu8)}
                      role={"img"}
                    />
                  </Icon>
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___8AoX)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__h2Ico)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8N6ZT)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___9QCZk)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__go8Rx
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us\n"
                      : "Contact us\n"}
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__jg9C1
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "(555) 555-5555"
                      : "(555) 555-5555"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__lxs29
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"support@example.com"}
                  </p.PlasmicLink>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__pupk)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___9Xhbs
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("#" as const)
                      : ("/shop" as const)
                  }
                  platform={"nextjs"}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Shop"
                    : "Shop"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__vJnV6
                  )}
                  component={Link}
                  href={"/academy" as const}
                  platform={"nextjs"}
                >
                  {"The Academy"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__ehSgr
                  )}
                  component={Link}
                  href={"/about" as const}
                  platform={"nextjs"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___33UAy
                  )}
                  component={Link}
                  href={"/help" as const}
                  platform={"nextjs"}
                >
                  {"Help"}
                </p.PlasmicLink>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__b3ZS7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__laWkL
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Email newsletter"
                    : "Email newsletter"}
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___5MVkJ)}
                >
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__yFzBq
                        )}
                      >
                        <AngleRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__ien7T)}
                          role={"img"}
                        />
                      </Button>
                    }
                    placeholder={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("E-mail" as const)
                        : ("E-mail" as const)
                    }
                    showEndIcon={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    }
                  />
                </div>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uCAt)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__nsqlq
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___5Ry0V)}
                        role={"img"}
                      />
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gr1UD)}
                    >
                      <p.PlasmicIcon
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? Icon3Icon
                            : Icon3Icon
                        }
                        className={classNames(projectcss.all, sty.svg__v0Ryb)}
                        role={"img"}
                      />

                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg___9Yzh)}
                        role={"img"}
                      />

                      <p.PlasmicIcon
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? Icon28Icon
                            : Icon28Icon
                        }
                        className={classNames(projectcss.all, sty.svg__lyp0X)}
                        role={"img"}
                      />
                    </p.Stack>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__xmTxt)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
              ) : null}
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__jTgn)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__jjEtf
                    )}
                  >
                    {"Sign up"}
                  </button>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__r7T5G
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___0HoEm)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pBpHp
                      )}
                    >
                      {"Log in"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__oksDe)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__ktw2H)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___2Iwxe)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tD74T)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__h7Vbd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uGtsp
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "(c) Company. All rights reserved. This site proudly built with"
                        : "© Company. All rights reserved. This site proudly built with"}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__x1Z7Q
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? " Plasmic"
                        : " Plasmic"}
                    </p.PlasmicLink>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__whL1O)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___4Vp8)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4WQhu
                      )}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7XTpU
                        )}
                      >
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__saaxd
                          )}
                          component={Link}
                          href={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("/shipping" as const)
                              : ("/shipping" as const)
                          }
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__eaQoP
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__j1Q8M
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "shop"
                              : "Shipping & Returns"}
                          </div>

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__h3Tqy
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>

                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__xthk6
                          )}
                          component={Link}
                          href={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("/privacypolicy" as const)
                              : ("/privacypolicy" as const)
                          }
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__pAQkq
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg___9JwVi
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___77Rx
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Privacy policy"
                              : "Privacy policy"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__iBlz
                          )}
                          component={Link}
                          href={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("/terms" as const)
                              : ("/terms" as const)
                          }
                          platform={"nextjs"}
                        >
                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__r9Q1B
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cjJuk
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Terms & Conditions"
                              : "Terms & Conditions"}
                          </div>

                          {false ? (
                            <IconIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__yplZg
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  single: [
    "single",
    "header",
    "columns",
    "productMedia",
    "productPrice",
    "productVariantPicker",
    "addToCartButton",
    "textInput",
    "textbox"
  ],
  header: ["header"],
  columns: [
    "columns",
    "productMedia",
    "productPrice",
    "productVariantPicker",
    "addToCartButton"
  ],
  productMedia: ["productMedia"],
  productPrice: ["productPrice"],
  productVariantPicker: ["productVariantPicker"],
  addToCartButton: ["addToCartButton"],
  textInput: ["textInput", "textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  single: "div";
  header: typeof Header;
  columns: "div";
  productMedia: typeof ProductMedia;
  productPrice: typeof ProductPriceComponent;
  productVariantPicker: typeof ProductVariantPicker;
  addToCartButton: typeof AddToCartButton;
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSingleProductPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSingleProductPage__VariantsArgs;
    args?: PlasmicSingleProductPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSingleProductPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSingleProductPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSingleProductPage__ArgProps,
          internalVariantPropNames: PlasmicSingleProductPage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSingleProductPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "single") {
    func.displayName = "PlasmicSingleProductPage";
  } else {
    func.displayName = `PlasmicSingleProductPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSingleProductPage = Object.assign(
  // Top-level PlasmicSingleProductPage renders the root element
  makeNodeComponent("single"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    columns: makeNodeComponent("columns"),
    productMedia: makeNodeComponent("productMedia"),
    productPrice: makeNodeComponent("productPrice"),
    productVariantPicker: makeNodeComponent("productVariantPicker"),
    addToCartButton: makeNodeComponent("addToCartButton"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicSingleProductPage
    internalVariantProps: PlasmicSingleProductPage__VariantProps,
    internalArgProps: PlasmicSingleProductPage__ArgProps
  }
);

export default PlasmicSingleProductPage;
/* prettier-ignore-end */
